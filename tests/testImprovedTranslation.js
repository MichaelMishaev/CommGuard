/**
 * Test Improved Auto-Translation Feature
 * Tests strict Hebrew detection and global toggle functionality
 */

const { getTimestamp } = require('../utils/logger');

console.log(`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó`);
console.log(`‚ïë      üåê Testing Improved Auto-Translation Feature      ‚ïë`);
console.log(`‚ïë                                                        ‚ïë`);
console.log(`‚ïë   Strict detection + Global on/off toggle             ‚ïë`);
console.log(`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`);
console.log('');

console.log('Running improved auto-translation tests...');
console.log('');
console.log(`[${getTimestamp()}] üß™ Testing improved translation features`);
console.log('');

let testsRun = 0;
let testsPassed = 0;
let testsFailed = 0;

/**
 * Test strict Hebrew detection logic
 */
function testStrictHebrewDetection() {
    console.log(`1Ô∏è‚É£ Testing strict Hebrew detection...`);
    testsRun++;
    
    try {
        // Import the function from index.js by reading and evaluating it
        const fs = require('fs');
        const indexContent = fs.readFileSync('./index.js', 'utf8');
        
        // Extract the isTextAllNonHebrew function
        const functionMatch = indexContent.match(/function isTextAllNonHebrew\(text\) \{[\s\S]*?\n\}/);
        if (!functionMatch) {
            console.log(`   ‚ùå isTextAllNonHebrew function not found`);
            testsFailed++;
            return;
        }
        
        // Create test function
        eval(functionMatch[0]);
        
        const testCases = [
            // Should translate (ALL non-Hebrew)
            { text: "Hello world", shouldTranslate: true, description: "Pure English" },
            { text: "Bonjour tout le monde", shouldTranslate: true, description: "Pure French" },
            { text: "How are you today?", shouldTranslate: true, description: "English with punctuation" },
            { text: "Good morning everyone!", shouldTranslate: true, description: "English with exclamation" },
            { text: "123 hello world", shouldTranslate: true, description: "Numbers + English" },
            
            // Should NOT translate (contains Hebrew or mixed)
            { text: "◊©◊ú◊ï◊ù ◊¢◊ï◊ú◊ù", shouldTranslate: false, description: "Pure Hebrew" },
            { text: "Hello ◊©◊ú◊ï◊ù", shouldTranslate: false, description: "Mixed Hebrew-English" },
            { text: "◊©◊ú◊ï◊ù world", shouldTranslate: false, description: "Hebrew-English mix" },
            { text: "Good morning ◊ë◊®◊õ◊ï◊™", shouldTranslate: false, description: "English-Hebrew mix" },
            { text: "◊ô◊ï◊ù ◊ò◊ï◊ë everyone", shouldTranslate: false, description: "Hebrew-English mix" },
            { text: "123 ◊©◊ú◊ï◊ù", shouldTranslate: false, description: "Numbers + Hebrew" },
            
            // Edge cases
            { text: "", shouldTranslate: false, description: "Empty string" },
            { text: "   ", shouldTranslate: false, description: "Only spaces" },
            { text: "123", shouldTranslate: false, description: "Only numbers" },
            { text: "!!!", shouldTranslate: false, description: "Only punctuation" },
            { text: "Hi", shouldTranslate: true, description: "Very short English" }
        ];
        
        let passed = 0;
        let failed = 0;
        
        testCases.forEach(test => {
            const result = isTextAllNonHebrew(test.text);
            if (result === test.shouldTranslate) {
                passed++;
                console.log(`   ‚úÖ "${test.text}" ‚Üí ${result} (${test.description})`);
            } else {
                failed++;
                console.log(`   ‚ùå "${test.text}" ‚Üí Expected: ${test.shouldTranslate}, Got: ${result} (${test.description})`);
            }
        });
        
        if (failed === 0) {
            console.log(`   ‚úÖ Strict Hebrew detection working perfectly (${passed}/${testCases.length})`);
            testsPassed++;
        } else {
            console.log(`   ‚ùå Strict Hebrew detection issues: ${passed}/${testCases.length} passed`);
            testsFailed++;
        }
    } catch (error) {
        console.log(`   ‚ùå Error testing strict Hebrew detection:`, error.message);
        testsFailed++;
    }
}

/**
 * Test global toggle configuration
 */
function testGlobalToggleConfig() {
    console.log(`2Ô∏è‚É£ Testing global toggle configuration...`);
    testsRun++;
    
    try {
        const config = require('../config');
        
        const hasAutoTranslationFeature = config.FEATURES && typeof config.FEATURES.AUTO_TRANSLATION === 'boolean';
        const defaultValue = config.FEATURES.AUTO_TRANSLATION;
        
        if (hasAutoTranslationFeature) {
            console.log(`   ‚úÖ AUTO_TRANSLATION config found`);
            console.log(`   ‚úÖ Default value: ${defaultValue}`);
            console.log(`   ‚úÖ Type: ${typeof config.FEATURES.AUTO_TRANSLATION}`);
            testsPassed++;
        } else {
            console.log(`   ‚ùå AUTO_TRANSLATION config missing or wrong type`);
            testsFailed++;
        }
    } catch (error) {
        console.log(`   ‚ùå Error testing config:`, error.message);
        testsFailed++;
    }
}

/**
 * Test toggle commands integration
 */
function testToggleCommandsIntegration() {
    console.log(`3Ô∏è‚É£ Testing toggle commands integration...`);
    testsRun++;
    
    try {
        const fs = require('fs');
        const commandHandlerContent = fs.readFileSync('./services/commandHandler.js', 'utf8');
        
        const hasAutotranslateCase = commandHandlerContent.includes("case '#autotranslate':");
        const hasTranslationCase = commandHandlerContent.includes("case '#translation':");
        const hasToggleHandler = commandHandlerContent.includes('handleTranslationToggle');
        const hasToggleFunction = commandHandlerContent.includes('async handleTranslationToggle(msg, args, isAdmin)');
        const hasOnOffLogic = commandHandlerContent.includes("command === 'on'") && commandHandlerContent.includes("command === 'off'");
        const hasStatusLogic = commandHandlerContent.includes("command === 'status'");
        
        if (hasAutotranslateCase && hasTranslationCase && hasToggleHandler && hasToggleFunction && hasOnOffLogic && hasStatusLogic) {
            console.log(`   ‚úÖ Toggle commands integration complete`);
            console.log(`   - #autotranslate case: ‚úÖ`);
            console.log(`   - #translation case: ‚úÖ`);
            console.log(`   - Handler function: ‚úÖ`);
            console.log(`   - On/Off logic: ‚úÖ`);
            console.log(`   - Status logic: ‚úÖ`);
            testsPassed++;
        } else {
            console.log(`   ‚ùå Toggle commands integration incomplete`);
            console.log(`   - #autotranslate case: ${hasAutotranslateCase ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - #translation case: ${hasTranslationCase ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Handler function: ${hasToggleFunction ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - On/Off logic: ${hasOnOffLogic ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Status logic: ${hasStatusLogic ? '‚úÖ' : '‚ùå'}`);
            testsFailed++;
        }
    } catch (error) {
        console.log(`   ‚ùå Error testing toggle commands:`, error.message);
        testsFailed++;
    }
}

/**
 * Test main logic integration
 */
function testMainLogicIntegration() {
    console.log(`4Ô∏è‚É£ Testing main logic integration...`);
    testsRun++;
    
    try {
        const fs = require('fs');
        const indexContent = fs.readFileSync('./index.js', 'utf8');
        
        const hasConfigCheck = indexContent.includes('config.FEATURES.AUTO_TRANSLATION &&');
        const hasStrictDetection = indexContent.includes('isTextAllNonHebrew(quotedText)');
        const hasHelperFunction = indexContent.includes('function isTextAllNonHebrew(text)');
        const hasWordSplitting = indexContent.includes('text.trim().split(/\\s+/)');
        const hasHebrewRegex = indexContent.includes('[\\u0590-\\u05FF]');
        
        if (hasConfigCheck && hasStrictDetection && hasHelperFunction && hasWordSplitting && hasHebrewRegex) {
            console.log(`   ‚úÖ Main logic integration complete`);
            console.log(`   - Config check: ‚úÖ`);
            console.log(`   - Strict detection: ‚úÖ`);
            console.log(`   - Helper function: ‚úÖ`);
            console.log(`   - Word splitting: ‚úÖ`);
            console.log(`   - Hebrew regex: ‚úÖ`);
            testsPassed++;
        } else {
            console.log(`   ‚ùå Main logic integration incomplete`);
            console.log(`   - Config check: ${hasConfigCheck ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Strict detection: ${hasStrictDetection ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Helper function: ${hasHelperFunction ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Word splitting: ${hasWordSplitting ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Hebrew regex: ${hasHebrewRegex ? '‚úÖ' : '‚ùå'}`);
            testsFailed++;
        }
    } catch (error) {
        console.log(`   ‚ùå Error testing main logic:`, error.message);
        testsFailed++;
    }
}

/**
 * Test help text updates
 */
function testHelpTextUpdates() {
    console.log(`5Ô∏è‚É£ Testing help text updates...`);
    testsRun++;
    
    try {
        const fs = require('fs');
        const commandHandlerContent = fs.readFileSync('./services/commandHandler.js', 'utf8');
        
        const hasAutotranslateHelp = commandHandlerContent.includes('#autotranslate <on/off/status>');
        const hasGlobalToggleExample = commandHandlerContent.includes('#autotranslate off');
        const hasControlExample = commandHandlerContent.includes('Control auto-translate');
        
        if (hasAutotranslateHelp && hasGlobalToggleExample && hasControlExample) {
            console.log(`   ‚úÖ Help text updates complete`);
            console.log(`   - Command help: ‚úÖ`);
            console.log(`   - Global toggle example: ‚úÖ`);
            console.log(`   - Control example: ‚úÖ`);
            testsPassed++;
        } else {
            console.log(`   ‚ùå Help text updates incomplete`);
            console.log(`   - Command help: ${hasAutotranslateHelp ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Global toggle example: ${hasGlobalToggleExample ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Control example: ${hasControlExample ? '‚úÖ' : '‚ùå'}`);
            testsFailed++;
        }
    } catch (error) {
        console.log(`   ‚ùå Error testing help text:`, error.message);
        testsFailed++;
    }
}

// Run all tests
async function runAllTests() {
    testStrictHebrewDetection();
    testGlobalToggleConfig();
    testToggleCommandsIntegration();
    testMainLogicIntegration();
    testHelpTextUpdates();
    
    console.log('');
    console.log(`üìä Test Results: ${testsPassed} passed, ${testsFailed} failed`);
    console.log('');
    
    if (testsFailed === 0) {
        console.log(`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó`);
        console.log(`‚ïë                    ‚úÖ ALL TESTS PASSED                        ‚ïë`);
        console.log(`‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£`);
        console.log(`‚ïë  Improved Auto-Translation Feature COMPLETE                  ‚ïë`);
        console.log(`‚ïë                                                               ‚ïë`);
        console.log(`‚ïë  üåê Enhanced Features:                                        ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Strict Hebrew detection (ALL words must be non-Hebrew)   ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Global on/off toggle for entire bot                      ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Admin commands: #autotranslate on/off/status             ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Mixed Hebrew/non-Hebrew messages ignored                  ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Smart word-level analysis with punctuation handling      ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Configuration-based feature toggle                       ‚ïë`);
        console.log(`‚ïë  ‚Ä¢ Enhanced help documentation                              ‚ïë`);
        console.log(`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`);
        console.log('');        
        console.log(`üìã *Detection Logic:*`);
        console.log(`‚úÖ "Hello everyone" ‚Üí Will translate (pure English)`);
        console.log(`‚úÖ "Bonjour tout le monde" ‚Üí Will translate (pure French)`);
        console.log(`‚ùå "Hello ◊©◊ú◊ï◊ù" ‚Üí Will NOT translate (mixed languages)`);
        console.log(`‚ùå "Good morning ◊ë◊®◊õ◊ï◊™" ‚Üí Will NOT translate (mixed languages)`);
        console.log('');
        console.log(`‚öôÔ∏è *Admin Commands:*`);
        console.log(`‚Ä¢ #autotranslate on ‚Üí Enable for entire bot`);
        console.log(`‚Ä¢ #autotranslate off ‚Üí Disable for entire bot`);
        console.log(`‚Ä¢ #autotranslate status ‚Üí Check current status`);
        
    } else {
        console.log(`‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó`);
        console.log(`‚ïë                    ‚ùå SOME TESTS FAILED                       ‚ïë`);
        console.log(`‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£`);
        console.log(`‚ïë  Please review the failed tests above                        ‚ïë`);
        console.log(`‚ïë  Tests passed: ${testsPassed}/${testsRun}                                             ‚ïë`);
        console.log(`‚ïë  Tests failed: ${testsFailed}                                             ‚ïë`);
        console.log(`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`);
    }
}

runAllTests().catch(console.error);